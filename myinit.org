
* Startup

Turns off startup message and tool-bar

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
#+END_SRC

verify with just y and n

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Show images when opening a file.

#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
#+END_SRC

use [[https://www.emacswiki.org/emacs/IbufferMode][iBuffer]]

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(autoload 'ibuffer "ibuffer" "List buffers." t)
#+END_SRC

follow sym-link to this file. for more information
=C-h v vc-follow-symlinks=

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

disable tabs

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

=word-wrap= will wrap a line are wrapped at the space
or tab character nearest to the right window edge.

#+BEGIN_SRC emacs-lisp
  (setq-default word-wrap t)
#+END_SRC

=global-auto-revert-mode= will automatically revert your files to what's on disk.

#+BEGIN_SRC emacs-lisp
(setq-default global-auto-revert-mode 1)
#+END_SRC

=show-trailing-whitespace= ...(this one speaks for itself)

#+BEGIN_SRC emacs-lisp
(setq-default show-trailing-whitespace t)
#+END_SRC

* Org
  
   | Key binding   | Description                                      |
   |---------------+--------------------------------------------------|
   | =C-c C-x C-v= | view inline image    (org-mode)                  |
   | =C-x ?=       | keybindings                                      |
   | =C-C C-e=     | org-export                                       |
   | =C-c C-v t=   | org-babel-tangle - exports tangled source blocks |

Babel setting allow the execution of code inside a file

#+BEGIN_SRC emacs-lisp
(use-package ox-icalendar)
(use-package ox-md)
(use-package org)
:ensure t
:config
(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)
   (haskell . t)
   (python . t)
   (emacs-lisp . t)
   (js . t)
  ))
'(org-export-backends (quote (ascii html icalendar latex md odt)))
#+END_SRC

Below list the files for agenda
  
#+BEGIN_SRC emacs-lisp
 '(org-agenda-files (quote ("~/Documents/org/journal.org")))
#+END_SRC

* Theme
  
Use =tsdh-dark= theme

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#2e3436" "#a40000" "#4e9a06" "#c4a000" "#204a87" "#5c3566" "#729fcf" "#eeeeec"])
 '(custom-enabled-themes (quote (tsdh-dark)))
)
#+END_SRC

* Packages

** evil

=evil= provides vim like key binding

   | Key binding        | Description                                        |
   |--------------------+----------------------------------------------------|
   | =v,   i,  ( or  )= | selects everyting inside also works with [, {, ... |
   | =*=                | selects  all  of  of  word                         |

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
  (progn
    (require 'evil)
    (evil-mode 1)
  ))
#+END_SRC

** interleave

   [[https://github.com/rudolfochrist/interleave][interleave]] presents a  pdf in emacs and opens a frame next to it
   which allows you to take notes in org-mode and later jump to the
   corresponding spot in the pdf

   #+BEGIN_SRC emacs-lisp
     (use-package interleave
       :ensure t)
   #+END_SRC

** try

=try= allows you to try packages without fully installing them

#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

** intero

   [[https://commercialhaskell.github.io/intero/][Intero]] uses stack to install the required version of Intero for each project

   | Key binding | Description                                       |
   |-------------+---------------------------------------------------|
   | M-.         | Jump to definition                                |
   | C-c C-i     | Show information of identifier at point           |
   | C-c C-t     | Show the type of thing at point, or the selection |
   | C-u C-c C-t | Insert a type signature for the thing at point    |
   | C-c C-l     | Load this module in the REPL                      |
   | C-c C-r     | Apply suggestions from GHC                        |
   | C-c C-k     | Clear REPL                                        |
   | C-c C-z     | Switch to and from the REPL                       |

   Intero's repl uses eshell.  To run [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#History][previous commands]] use =M-p= and =M-n=

#+BEGIN_SRC emacs-lisp
(use-package intero
  :ensure t
  :config
    (add-hook 'haskell-mode-hook 'intero-mode)
)
#+END_SRC

** web-mode
  
   [[http://web-mode.org/][web-mode]] major mode for editing web templates aka HTML files embedding parts (CSS/JavaScript)
   and blocks (pre rendered by client/server side engines).

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (setq web-mode-engines-alist
	'(("css" . (ac-source-css-property))
	  ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
      (setq web-mode-enable-auto-closing t)
      ;;(setq web-mode-markup-indent-offset 2)
      ;;(setq web-mode-css-indent-offset 2)
      ;;(setq web-mode-code-indent-offset 2)
      (setq web-mode-enable-current-element-highlight t)
      (setq web-mode-enable-current-column-highlight t)

      ;; use web-mode for .jsx files
      (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))

      ;; http://www.flycheck.org/manual/latest/index.html
      (require 'flycheck)

      ;; turn on flychecking globally
      (add-hook 'after-init-hook #'global-flycheck-mode)

      ;; disable jshint since we prefer eslint checking
      (setq-default flycheck-disabled-checkers
        (append flycheck-disabled-checkers
          '(javascript-jshint)))

      ;; use eslint with web-mode for jsx files
      (flycheck-add-mode 'javascript-eslint 'web-mode)

      ;; customize flycheck temp file prefix
      (setq-default flycheck-temp-prefix ".flycheck")

      ;; disable json-jsonlist checking for json files
      (setq-default flycheck-disabled-checkers
        (append flycheck-disabled-checkers
          '(json-jsonlist)))

     ;; use local eslint from node_modules before global
     ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
     (defun my/use-eslint-from-node-modules ()
       (let* ((root (locate-dominating-file
                     (or (buffer-file-name) default-directory)
                     "node_modules"))
              (eslint (and root
                           (expand-file-name "node_modules/eslint/bin/eslint.js"
                                             root))))
         (when (and eslint (file-executable-p eslint))
           (setq-local flycheck-javascript-eslint-executable eslint))))
     (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)

     ;; adjust indents for web-mode to 2 spaces
     (defun my-web-mode-hook ()
       "Hooks for Web mode. Adjust indents"
       ;;; http://web-mode.org/
       (setq web-mode-markup-indent-offset 2)
       (setq web-mode-css-indent-offset 2)
       (setq web-mode-code-indent-offset 2))
     (add-hook 'web-mode-hook  'my-web-mode-hook)

     ;; for better jsx syntax-highlighting in web-mode
     ;; - courtesy of Patrick @halbtuerke
     (defadvice web-mode-highlight-part (around tweak-jsx activate)
       (if (equal web-mode-content-type "jsx")
         (let ((web-mode-enable-part-face nil))
           ad-do-it)
         ad-do-it))
)
#+END_SRC

#+RESULTS:
: t

** emmet-mode

   [[https://github.com/smihica/emmet-mode][emmet-mode]] is a minor mode providing support html and css abbreviation.

   | Key binding | Description              |
   |-------------+--------------------------|
   | =C-j=       | runs =emmet-expand-line= |

   #+BEGIN_SRC emacs-lisp
   (use-package emmet-mode
     :ensure t)
   (add-hook 'web-mode-hook 'emmet-mode)
   #+END_SRC

** docker-mode

   juse use it for syntax highlighting

   #+BEGIN_SRC emacs-lisp
   (use-package dockerfile-mode
     :ensure t )
   #+END_SRC


** markdown-mode

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
)
#+END_SRC

** elfeed

=elfeed= is a rss feed reader

#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :ensure t
  :bind (:map elfeed-search-mode-map
          ("q" . bjm/elfeed-save-db-and-bury)
          ("Q" . bjm/elfeed-save-db-and-bury)
          ("j" . mx/make-and-run-elfeed-hydra)
          ("J" . mx/make-and-run-elfeed-hydra)
          ("m" . elfeed-toggle-star)
          ("M" . elfeed-toggle-star)
  ))
#+END_SRC

;; (use-package elfeed-goodies
;;   :ensure t
;;   :config
;;   (elfeed-goodies/setup))

#+BEGIN_SRC emacs-lisp
(use-package elfeed-org
  :ensure t
  :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/Documents/org/elfeed.org")))
#+END_SRC

** hydra

   https://github.com/abo-abo/hydra#hydra-awesome

   #+BEGIN_SRC emacs-lisp
     (use-package hydra
       :ensure t)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defhydra hydra-myfiles nil
       "files"
       ("j" (find-file "~/Documents/org/journal.org") "journal")
       ("i" (find-file "~/projects/myConfig/myinit.org") "emacs init")
       ("n" (find-file "/sudo::/etc/nixos/configuration.nix") "nixos config"))

       (global-set-key (kbd "C-x C-k 0") 'hydra-myfiles/body)
   #+END_SRC

** magit

   =?= in magit window will bring up the =magit-dispatch-popup=,
   which provides a useful list of commands.
   
   To select a section from the unstage changes =C-space=, select lines,
   and stage with =s=.

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :config 
       (global-set-key (kbd "C-c m") 'magit-status))
   #+END_SRC
** yaml
   
   [[https://github.com/yoshiki/yaml-mode][yaml-mode]] - Simple major mode to edit YAML file for emacs

   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :ensure t
       :config 
       (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
   #+END_SRC
** neotree

   [[https://www.emacswiki.org/emacs/NeoTree][neotree]] - emacs tree plugin like NerdTree for vim

   | Key binding       | Description                                                                       |
   |-------------------+-----------------------------------------------------------------------------------|
   | n                 | next line                                                                         |
   | p                 | previous line                                                                     |
   | SPC or RET or TAB | Open current item if it is a file. Fold/Unfold current item if it is a directory. |
   | g                 | Refresh                                                                           |
   | A                 | Maximize/Minimize the NeoTree Window                                              |
   | H                 | Toggle display hidden files                                                       |
   | C-c C-n           | Create a file or create a directory if filename ends with a ‘/’                   |
   | C-c C-d           | Delete a file or a directory.                                                     |
   | C-c C-r           | Rename a file or a directory.                                                     |
   | C-c C-c           | Change the root directory.                                                        |
   | C-c C-p           | Copy a file or a directory.                                                       |

   #+BEGIN_SRC emacs-lisp
   (use-package neotree
   :ensure t
   :config
   (global-set-key [f8] 'neotree-toggle))
   #+END_SRC

** undo-tree

   https://melpa.org/#/undo-tree

   treats undo history as what it is: a branching tree of changes.

   #+BEGIN_SRC emacs-lisp
          (use-package undo-tree
          :ensure t
          :config
            (require 'undo-tree)
            (global-undo-tree-mode)
          )
   #+END_SRC

** smartparens

   [[https://github.com/Fuco1/smartparens][smartparens]] deals with parens pairs and tries to be smart about it

   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :config
       (require 'smartparens-config)
       (add-hook 'emacs-lisp-mode-hook #'smartparens-mode)
       )
   #+END_SRC

* Useful Snippets

  To find current major mode buffer paste the following
  line in the buffer and =C-x C-e= to execute the code

  #+BEGIN_EXAMPLE emacs-lisp
  (message "%s" major-mode)
  #+END_EXAMPLE
